---
import "/src/assets/styles/_base.css";
import "bigger-picture/css";
import "swiper/css";
import "swiper/css/navigation";
import "swiper/css/pagination";

import BaseHead from "@/components/layout/BaseHead";
import Header from "@/components/layout/Header";
import Footer from "@/components/layout/Footer";

// props
export interface Props {
	title?: string;
	description?: string;
	transparentHeader?: boolean;
	marginTop?: boolean;
	marginBottom?: boolean;
}

const { title, description, transparentHeader = false, marginTop = true, marginBottom = true } = Astro.props;
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
	</head>

	<body class="min-h-screen bg-[radial-gradient(80vw_circle_at_top_center,_rgba(224,242,254,1),_transparent)]">
		<Header headerLight={transparentHeader ? true : false} />

		<main class:list={["flex flex-col min-h-screen bg-[radial-gradient(80vw_circle_at_bottom_left,_rgba(224,242,254,1),_transparent)]", marginTop && "pt-32", marginBottom && "pb-32"]}>
			<div class="grow">
				<slot />
			</div>
		</main>

		<Footer />

		<div class="overlay fixed inset-0 z-20 bg-black/60 invisible opacity-0 transition-all"></div>

		<script>
			// swiper
			// import Swiper from "swiper";
			// import { Navigation, Pagination } from "swiper/modules";

			// let swiperModels = new Swiper(".swiper-models", {
			// 	modules: [Navigation, Pagination],
			// 	spaceBetween: 24,
			// 	initialSlide: 1,
			// 	centeredSlides: true,
			// 	loop: true,
			// 	navigation: {
			// 		nextEl: ".swiper-button-next-custom",
			// 		prevEl: ".swiper-button-prev-custom",
			// 	},
			// 	pagination: {
			// 		el: ".swiper-pag",
			// 		type: "custom",
			// 		renderCustom: function (swiper, current, total) {
			// 			return current + " of " + total;
			// 		},
			// 	},
			// 	breakpoints: {
			// 		1440: {
			// 			spaceBetween: 36,
			// 		},
			// 		1024: {
			// 			spaceBetween: 36,
			// 		},
			// 		768: {
			// 			spaceBetween: 36,
			// 		},
			// 	},
			// });

			// modal
			import BiggerPicture from "bigger-picture";

			let bp = BiggerPicture({
				target: document.body,
			});

			// open (will be a child of the target element above)
			let imageLinks = document.querySelectorAll(`.gallery img`);

			// add click listener to open BiggerPicture
			for (let link of imageLinks) {
				link.addEventListener("click", openGallery);
			}

			// function to open BiggerPicture
			function openGallery(e) {
				e.preventDefault();
				bp.open({
					items: imageLinks,
					el: e.currentTarget,
					scale: 0.8,
				});
			}
		</script>
	</body>
</html>
