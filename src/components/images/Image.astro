---
import { imageConfig } from "@/config";
import { getEntry } from "astro:content";

export interface Props {
	src: string;
	gallery?: boolean;
	pictureClass?: string;
	lazy?: boolean;
}
const { src, gallery = true, pictureClass, lazy = true, ...attrs } = Astro.props;

// image details
const imageName = src.replace("https://cdn.cosmicjs.com/", "");
//const imageNameWithoutExtension = imageName.replace(/\.[^/.]+$/, "");

const imageMetadata = await getEntry("media", imageName);

// loop through all the necessary image widths
const imageOptimized = [];
for (let size of imageConfig.imageSizes) {
	imageOptimized.push(`${imageMetadata.data.imgix_url}?w=${size}&auto=format ${size}w`);
}

const imageSrcSet = imageOptimized.join(", ");
---

<picture class:list={[pictureClass, gallery && "gallery hover:cursor-pointer"]}>
	{
		imageMetadata ? (
			<img
				srcset={imageSrcSet}
				src={`${imageMetadata.data.imgix_url}?auto=format`}
				alt={imageMetadata.data.alt}
				width={imageMetadata.data.width}
				height={imageMetadata.data.height}
				data-img={imageSrcSet}
				data-width={imageMetadata.data.width}
				data-height={imageMetadata.data.height}
				data-caption={imageMetadata.data.alt}
				{...attrs}
				loading={lazy ? "lazy" : "eager"}
			/>
		) : (
			<img src={`${imageMetadata.data.imgix_url}?auto=format`} srcset={imageSrcSet} loading={lazy ? "lazy" : "eager"} {...attrs} />
		)
	}
</picture>
